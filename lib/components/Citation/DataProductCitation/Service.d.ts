import { Dispatch } from 'react';
import { AnyAction, Nullable, Undef, UnknownRecord } from '../../../types/core';
import { DataProductDoiStatus, DataProductRelease } from '../../../types/neonApi';
import { FetchStatus, FetchStatusState, DataProductCitationState, CitationRelease, ContextDataProduct } from './State';
import { DataProductCitationViewProps, DataProductCitationViewState } from './ViewState';
declare const Service: {
    fetchIsAwaitingCall: (fetchObject: Nullable<FetchStatusState>) => boolean;
    stateHasFetchesInStatus: (state: DataProductCitationState, status: string) => boolean;
    calculateFetches: (state: DataProductCitationState) => DataProductCitationState;
    calculateAppStatus: (state: DataProductCitationState) => DataProductCitationState;
    applyReleasesGlobally: (state: DataProductCitationState, releases: DataProductRelease[]) => DataProductCitationState;
    applyDoiStatusReleaseGlobally: (state: DataProductCitationState, productCode: string, release: string, doiStatus: Nullable<DataProductDoiStatus | DataProductDoiStatus[]>) => DataProductCitationState;
    calculateContextState: (newState: DataProductCitationState, neonContextState: UnknownRecord, release: Nullable<string>, productCode: Nullable<string>) => DataProductCitationState;
    useViewState: (state: DataProductCitationState, props: DataProductCitationViewProps) => DataProductCitationViewState;
    getReleaseObject: (releases: CitationRelease[], release: Nullable<string>) => Nullable<CitationRelease>;
    getReleaseDoi: (releases: CitationRelease[], release: Nullable<string>) => Nullable<string>;
    buildCitationDownloadKey: (citationProduct: ContextDataProduct, releaseCb: string, formatCb: string, provisionalCb?: boolean) => string;
    hasCitationDownloadStatus: (citationDownloadsFetchStatus: Record<string, FetchStatusState>, provisionalCb: boolean, productCode: string, statusCb: FetchStatus) => boolean;
    handleResetCitationDownloads: (citationDownloadsFetchStatus: Record<string, FetchStatusState>, provisionalCb: boolean, productCode: string, dispatch: Undef<Dispatch<AnyAction>>) => void;
};
export default Service;
